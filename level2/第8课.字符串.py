"""

第8课 字符串

8.1 学习要点

学习字符串的基本操作以及格式化输出。

8.2 对标内容

（1）理解字符串类型的概念,掌握它的基础用法及操作:字符串的分割、结合、替换、检索、长度获取。

（2）运用%运算符输出指定格式，format（)格式化输出。

8.3 情境导入

计算机是由美国发明的，所以在最早的计算机里面只有 127 个字符，包括英文字母、数字和一些常用符号；
但是随着计算机的普及，全世界各国的语言有近百种,127个字符显然不够用,这样各国都开始建立自己的文字编码。
但是,各国自己创建自己的编码,势必会造成编码之间的冲突,那该怎么办呢? Unicode编码应运而生。
Unicode 编码把所有语言都统一到一套编码里，这样就不会再有乱码问题了,这就是现在我们计算机用的通用编码库。
现在国内用得最多的UTF-8就是在Unicode编码的基础上发展出来的。

8.4 字符串

4.1 字符串的特性

字符串是Python中最常用的数据类型,是不可变序列的一种。
我们可以使用英文(半角)引号(单引号,或双引号")来创建字符串。

8.4.2 字符串的创建

(1）直接赋值，如 var = "Python 编程等级考试"。
(2) 使用str()从其他类型转换，如str(1234)。

8.4.3 不可变序列的通用操作在字符串中的应用

1. 字符串的访问

直接使用字符串变量名加下标的格式访问,如a ="Python",a[0]可以获取到第一个元素的值为 P。

2. 字符串的截取

使用字符串变量加索引的起点和终点进行截取,但是要注意不包含终点索引上的元素，如下例所示。

>>> str = "中国电子学会Python编程等级考试"
>>> str[0:6]
>>> print(str)
"中国电子学会"

3. len()

获取字符串的长度。

4. in

检查某一个字符或者字符串是否包含在字符串中。

5. max()

求字符串中Unicode编码值最大的元素。
Python 3 是按照Unicode编码进行排序的,其基本规律如下:
数字在最前面,接下来是大写字母,然后是小写字母,最后是中文等其他文字。

6. min()

求字符串中 Unicode 编码值最小的元素。

7.+

字符串的加法运算，将两个字符串连接在一起。

8. sorted()

字符串排序。由于字符串也是不可变序列,所以不可以使用sort命令进行排序, sorted()依然按照Unicode编码顺序排序。

9. index()

查找某个元素的位置,使用方法同其他数据类型中的index(),返回值为该元素的下标。

10. count()

查找某个字符或者字符串在整个字符串中的个数，使用方法同元组中的count()。

8.4.4 字符串特有的相关操作

1. Python中的转义字符

Python中的字符串是用引号引用起来，但是我们有时候需要输出一些特殊的字符,比如引号、缩进、换行等,
为了更好地实现这些功能,大部分编程语言在字符串中都有转义字符。

Python中的转义字符使用反斜杠 \ 来表示,转义字符有很多，二级考试要求掌握的转义字符及作用如下所示。


转义符        描述        案例
\\           反斜杠       >>> prirt('\\')
                            \
\'           单引号       >>> print('\")
                            '
\''          双引号       >>> print('\''')
                            ''
\b           退格键       >>> print("Hello\bWorld!")
                            Hello World!
\n           换行         >>> print("Hello\nWorld!")
                            Hello
                            World!

2. 格式化输出

Python支持格式化字符串的输出，格式化输出有两种方式，一种是%，一format

（1）% 格式化输出

在Python中,%格式化输出要求比较严格,要求元素的数量和数据类型必一一对应。%格式化有很多种，二级考试中要求掌握的有所下所示的几种。

符号  描述                       案例

%s   格式化整数,                 >>> print("这是第%s行。"%3)
     如果s前面有数字,                 这是第3行。
     则代表该整数所要占的位置      >>> print("这是第 %4s 行。"%3)
                                    这是第 3行。（3 的前面有3个空格）

%f   格式化浮点数,               >>> print('圆周率的近似值是: %f。'%3.14159265358979323846)
     如果f前面有数字，               圆周率是：3.141593。
     则代表保留的小数精，         >>> print(圆周率的近似值是：%.2f。%3.1415926535 8979323846)
     具体请参考易错点介绍             圆周率的近似值是：3.14。


%s  格式化字符串,                >>> print("我的名字叫%s,我是%s的学生。“%（小明'，'四年级 3 班)")
    如果前面有数字，                 我的名字叫小明，我是四年级 3 班的学生。
    则代表字符串的长度，
    体请参考易错点介绍


（2) format 格式化输出

相对于%格式化输出，format格式化输出的要求就没那么严格了，在Python 3 中,format也有很多种方法，二级考试要求掌握如下几种。

第一种：使用 format 后面的元组索引位置格式，如下例所示。

>>> print('1 乘以{0}等于{0}， 2 乘以{1}等于{2}。'.format (3,4,8))
1 乘以 3 等于 3，2 乘以 4 等于 8。

第二种:使用命名方式,给每个需要格式化的位置命名,然后在format中进行变量赋值，如下例所示。

(1) print('我叫{name}，我会的编程语言有{programl}和{program2},我学习编程
已经{age}年了,用得最多的编程语言是{program2}。'.format (name='张三",programl='Scratch',program2='Python', age=4))

我叫张三,我会的编程语言有Scratch和Python，我学习编程已经4年了、用得最多的编程语言是Python

3. split()

作用：字符串分割，将一个完整的字符串使用分割符分割成字符串列表。
格式:字符串名字.("分隔符")，如下例所示。

>>> Fruits="苹果，香蕉，橘子，葡萄"
>>> Fruitsl=Fruits.split (",")
>>> Fruitsl
['苹果'，'香蕉 '，'橘子'，'葡萄勺]

4. join()

作用：和 split()的功能刚好相反，将列表结合为字符串。
格式："连接符".join(字符串名)，如下例所示。

>>> Fruits=['苹果'，'香蕉'，'橘子'，'葡萄勺']
>>> Fruitsl = ",".join (Fruits)
>>> Fruitsl
苹果，香蕉，橘子，葡萄

8.4.5 易错点

 (1) 字符串的截取如果没有步长信息,则步长为1;如果有,则按照步长进行截取。

（2）字符串中的数字是字符串类型的，所以不能用 sum() 进行求和运算。

（3）字符串中的很多操作，比如检查是否在字符串中、字符串中某一个字符出现的次数等都要注意字符串要加引号,否则Python会认为是变量而不是字符串。

 (4) %f可以有两个参数，由小数点隔开,比如%3.21;小数点前面的数字代表整个小数的占位数量，如果数位不够，则用空格在前面补齐；
 小数点后面的数字代表小数位数，如果小数位数不够则用0补齐，如下例所示。小数位数的保留采用四舍五入的进位法保留。

>>> print('这个数是：%10.5f'%1.2)
这个数是:   1.20000 # 1的前面有 3 个空格，整个小数一共 10 个字符

 (5)%s的s前面可以加整数，代表字符串的长度,如果字符串长度超出了该数字,则显示全部字符串;
 如果没有超出,则在字符串的前面用空格补齐,如下例所示。

>>> print('我的名字叫：%s。'%'Python')
我的名字叫：Python

>>> print('我的名字叫：%2s。'%'Python')
我的名字叫: Python

>>> print('我的名字叫: %10s。'%'Python')
我的名字叫: Python

(6)%格式化输出可以混合使用,但是每个%对应一个内容,必须用元组一对应注明出来，如下例所示。

>>> print('我的名字叫：%s，今年%d岁了，我是%.1f班的学生。'%('张三'，10,4.3))
我的名字叫:张三,今年10岁了,我是4.3班的学生。

模拟考题
考题1单选题

已知s=list("sgdhasdghasdg"),以下选项中能输出字符"g"出现的次数的是

A. print(s.index(g))
B. print(s.index("g"))
C. print(s.count("g"))
D. print(s.count(g))

答案：C

解析：查找某一个字符在字符串中的索引位置使用 index()函数，
但是查找某一个字符在字符串中出现的次数需要使用 count()函数，
另外、count()括号里面的字符一定要用引号引起来,所以正确答案是C。

考题2单选题

下列代码的执行结果是？

s1="abcde"
s2="fgh"
s3=s1+s2
s3[4:7]

A. efg
B. efgh
C. def
D. defg


答案：A

解析:根据题意可知,s1+s2是将两个字符串进行合并,结果为"abedefgh",然后赋值给s3,
s3[4:7]代表截取字符串s3的索引为4-7(不含7)的字符串，所以结果为 efg，选择 A。

考题3单选题

已知字符串中的某个字符，要找到这个字符的位置，最简便的方法是(

A. 切片
B. 连接
C. 分割
D. 索引

答案: D

解析:切片是已知索引才可以进行切片、排除A选项:连接是将两个字符串连接为一个,也不符合题意,排除B;
分割是将一个字符串分为由多个字符串组成的列表,也不符合题意,排除C;索引是已知字符串,然后寻找它的位置,符合题意，所以选择 D。

考题 4 单选题

对s="www.baidu.com"执行s.split(".")后的结果是?

A. www.baidu.com
B. ['www','baidu','com']
C. "www.baidu.com"
D. wwwbaiducom

答案：B

解析: split是字符串分割,通过split(),我们可以将字符串分割成列表,所以正确答案是 B。

考题5判断题

运行如下代码：

print（'今天是%d月%d日，星期%s，天气%s'%(3,25，'三'，'晴好'))
结果为“今天是3月25日，星期三，天气晴好”。

答案：正确
解析：这是对字符串格式化输出的用法的考核，%d代表整型，%s代表字符串，根据%后面的元组,将(3,25,"三'、晴好')四个元素一一填入对应的格式位置,
得到的就是“今天是3月25日、星期三,天气晴好”,所以题目所述是正确的。


考题6 单选题

下面程序的执行结果为

s = '{0}+{1}={2)'.format (2, 3, 5)
print (s)

A. 0+1=2
B. {0}+{1}={2}
C. 2+3=5
D. {2}+{3}={5}

答案：C

解析: format的格式化, {}里面如果为数字,则代表参数在元组中的索引位置,
根据题意， s = "{0}+{1)=(2)'.format(2, 3,5),格式化输出的结果为s='2+3=5'，所以选择 C。

"""
