# 流程控制


"""
10.1 学习要点

学习 Python 中的流程控制，熟悉条件语句、循环语句的使用方法，
结合之前的知识能够编写较为复杂的程序，能够解决较为复杂的问题。

10.2 对标内容

(1) 让学生掌握 Python 编程的流程控制以及数据类型，会使用这些相关语句进行编程，
会使用循环、分支等语句完成较为复杂的 Python 语句，能够解决较为复杂的问题。
(2) 对 Python 编程有更深入的了解，熟悉 Python 数据类型和流程控制语句，
具备一定的逻辑推理能力和逻辑推理用程序表达出来的计算思维能力。
(3) 理解选择结构语句的功能和写法，能够完成简单选择结构的程序。
(4) 掌握程序的单分支结构，理解二分支、多分支结构语句。
(5) 理解循环结构语句的功能和写法，能够完成简单的循环结构的程序；
理解 for 循环、while 循环、break 和 continue 循环控制结构语句。
(6) 理解 range() 概念，掌握它的基础用法及操作。


10.3 情境导入

世界万物都是有秩序的，大到宇宙、小到原子结构都有自己的规律，不过有些规律已经被我们人类所认识，
有些规律还处在未知状态。秩序保证着我们的世界能够正常运转，生态、社会、交通、工作等都有自己的规则。
计算机世界也有自己的流程控制规则，这些规则的组合应用才形成了现在多姿多彩的信息时代。
流程控制从某种程度是计算机里面的 “交通信息灯”。

10.4 分支结构

10.4.1 知识点详解

分支结构又称为条件语句，在Python 中，条件语句可以通过对一个或者多个条件进行判断，从而让程序按照一定的流程处理相关工作。

1.条件语句的构成
在 Python 中，条件语句一般由if 、elif、else 组成，根据其组成的分支数量不同，
可以分为单分支结构、二分支结构和多分支结构。

2.单分支结构
单分支结构由一个if 语句组成，如果条件成立则执行指定的语句块；
如果条件不成立则不执行任何语句块，直接进入条件语句之后的语句。(processON演示)

单分支结构在 Python 中的写法要求如下。

(1) if 语句后面跟随条件表达式。
(2) if 条件语句后面必须跟英文冒号(:)，表示条件语句成立后需要执行的程序的开始。
(3) 条件成立时运行的语句或者语句块必须缩进，一般缩进4个空格或者1个tab。
(4) 不在条件语句执行模块里面的后续语句不能缩进，必须和if语句保持同一缩进，如下例所示：

```
前面语句
if 条件表达式
    语句/语句块
后续语句
```
单分支结构一般只用于只有一种情况的程序，如下所示。
在这个实例程序中，只有一个条件语句(a > 0) ，如果条件成立，则输出 “a” 为正数；条件语句之后的print('程序已经执行完')，
无论条件是否成立，均会执行。

```
a = 34
if a > 0:
    print('a 为正数')
print('程序已经执行完')
```

3.二分支结构

二分支结构，也有一个if语句，但和单分支结构不同的是，二分支结构有条件成立和条件不成立两种情况。
其工作流程在（processon）演示。

二分支结构由if……else…… 组成，if后面跟随条件，条件后面必须要有英文冒号(:)；
else 后面无需跟随条件，但是也必须加英文冒号(:)。同样的，条件成立以及条件不成立的语句块均要缩进；
else之后不在条件语句内的后续语句无需缩进，必须和else 保持一致。如下所示：

```
a = 34
if a > 0:
    print('a 为正数')
else:
    print('a 为 0 或者负数')
print('程序已执行完')
```

在上面的实例中，条件 a > 0，但是分为两种情况，一种是条件成立，则输出 ‘a 为正数。’;
另一种是条件不成立，则输出 ‘a 为 0 或者负数’。最后一句为后续语句，不管条件成立与否，均要执行。

4. 多分支结构

多分支结构，顾名思义是由多个分支组成的结构，用于多种条件下的程序设计，其工作流程（processon）演示。
多分支结构，其格式为if……elif……elif……else……。elif的意思为 “否则如果”，elif后面需要跟随条件判断语句。
elif 可以根据条件判断的多少进行增减。同样的，每一个条件下的语句块都必须缩进

```
a = 34
if a === 0:
    print('a 为 0')
elif a > 0:
    print('a 为 正数')
else:
    print('a 为 负数')
print('程序已执行完')
```

5. 分支结构的嵌套

分支结构的嵌套，又称作条件语句的嵌套，它也是多分支结构的一种表现形式，其特征是，
一般由多层二分支或者多分支结构嵌套在一起组合而成。二级考试涉及到的分支嵌套一般不超过三层。(processon演示)

嵌套分支中的每一个分支都必须遵守缩进和英文冒号等格式要求，同一级别的分支必须再同一个缩进层次里面。
嵌套分支中，程序是先运行最外层的条件，然后再逐层运行里面的嵌套条件，一直到最后的语句块；
我们也可以理解为下一层的分支是作为一个整体放到了上一层的分支中，如下：

```
a = 34
if a % 2 === 0:
    if a % 3 === 0:
        print('a 可以被2整除。也可以被3整除')
    else:
        print('a 可以被2整除，但不可以被3整除')
else:
    if a % 3 === 0:
        print('a 不可以被2整除，但可以被3整除')
    else:
        print('a 既不可以被2整除，也不可以被3整除')
print('程序已经执行完')

10.4.2 易错点

(1) 单分支结构适合只有一种情况的程序，分支之后的程序，无论条件是否成立，都要执行。
(2) else 后面没有条件语句，但是依然需要加英文冒号。
(3) elif 后面必须有条件语句，并且条件语句后面也需要加英文冒号。
(4) 嵌套分支一定要注意分支的缩进，缩进不同代表不同的嵌套层次。
```

10.5 循环结构

10.5.1 知识点讲解

在 Python 中，循环可以分为两大类：条件循环（while循环）和遍历循环（for循环）

1.条件循环

条件循环（while循环）指的是如果某个条件成立，则一直执行某个或者某些语句块，
一般被重复执行的语句块称作循环体。（processOn）。

条件循环语句的一般格式为：

```
while 判断条件：
    执行代码块（循环体）
```

如下所示：

```
a = 1
while a < 5:
    print(a)
    a += 1
```

2. 遍历循环

遍历循环（for循环） 是序列（或其他可迭代对象）中每个元素执行相关语句块的循环过程；
也可以理解为将可迭代的对象从迭代器里面按照一定的规则（比如一个个、隔一个）取出，然后进行相关操作的过程。
（processon）

for循环语句的一般格式为：

```
for 变量 in 序列：
    执行代码块（循环体）
```

如下所示：

```
for i in [1,2,3,4,5,6,7]:
    i = i * 2
    print(i)
```

3. break 语句： 循环的跳出

循环中，如果需要跳出循环，一般使用 break 语句。break 的作用是跳出当前的while 循环或者 for 循环。（processon）

break 语句一般会和条件语句结合起开使用，如下所示：

```
b = 15
while b > 0:
    b -= 1
    if b === 2:
        break
    print(b)
print('循环结束')
```

4. continue语句： 停止当前循环，开启下次循环

和 break 语句不同，continue 语句并不会跳出循环，它只是停止当前循环，然后跳回循环开始位置，继续下次循环。
（pricesson演示）

同样的，continue 语句一般也要和条件语句结合起来使用，如下所示：求1-10(含)的奇数
```
a = 0
while a < 10:
    a += 1
    if a % 2 === 0:
        continue
    print(a)
```

5. range 语句

range() 并不是一种数据类型，也不是列表，它是一种可迭代对象。
range() 的参数有三个，格式为range(start, stop, step)； start 代表开始位置，
改参数为可选项，如果没有则代表从0开始；stop代表结束位置，改参数为必须项；step为步长，改参数可选项
如果没有，则代表步长为1.

range() 中的参数必须为整数，不能为小数。
range()一般和for循环结合起来使用，用于控制循环次数。

```
for i in range(5):
    print(i)
```


10.5.2 易错点

(1) break 语句与continue 语句的不同： break 语句可以跳出 for 和 while 循环，
终止了 for 和  while 循环，任何对应的循环 else 将不再执行。

continue 语句被用于 跳出当前循环中的剩余语句，然后继续进行下一轮循环。
continue 并没有跳出循环和停止循环，只是暂停了当次循环的剩余语句。
(2) 循环也可以进行嵌套循环，嵌套的循环是作为一个整体参与循环，所以要注意缩进关系。
(3)无限循环一般采用 while 循环，只需要将 while 后的条件语句永久设为 True 就可以实现。
(4) 由于 for 循环是遍历方式的有限次数循环，所以 for 循环均可以改为 while 循环。
(5) 循环语句一般和条件语句以及其它知识点整合在一起命题，遇到这种题目，首先要理清循环结构、判断条件
，然后按照程序流程逐一进行分析，从而得到答案。

"""