"""
15.5 枚举算法

15.5.1 问题引入

模糊单据:一张单据上有一个5位数的编号,其百位数和十位数处已经变得
模糊不清,如图15-5所示。但是知道这个5位数是37或67的倍数。请你编写程序,
找出所有满足条件的5位数,并统计这些5位数的个数。

图15-5 模糊单据

15.5.2 知识点详解

1、枚举算法的概念

枚举算法又叫穷举算法,其基本思想是把问题所有的解一一地罗列出来,
并对每一个可能解进行判断,以确定这个可能解是否是问题的真正解。
若是,就采纳这个解,否则就抛弃它。即使中途找到符合的解也要继续找下去,将所有可能都找完才结束。

2.枚举算法的程序实现

(1)列举与检验过程既不重复也不遗漏。
(2)尽可能地使可能解的罗列范围最小,以提高解决问题的效率。
(3)用循环语句(for语句)在一定范围内列举所有可能的解。
(4)用选择语句(if语句)判断和选择真正的解。

枚举算法的一般格式:

循环结构:
    循环体内判断:


思考题

(1)用50元钱兑换面值为1元、2元、5元的纸币共25张。每种纸币不少于1张,问有多少种兑换方案。
求解这个问题,最适合的算法是()

A.排序算法 B.递归算法 C.枚举算法 D.解析算法

(2)如果一个自然数恰好等于它的因子之和,这个数就称为“完全数”。
例如,6就是一个“完全数”,因为6的因子为1、2、3,而6= 1+2+3。
设计一个算法找出1000以内所有的“完全数”,那么求解这个问题主要用到的算法是

A.递归算法 B.排序算法 C.解析算法 D.枚举算法

(3)下列问题适合使用枚举算法解决的是

A.计算本月的电费
B.计算全班男同学的平均身高
C.查找100以内所有能被2和3整除的整数
D. 200米短跑比赛成绩排名


(4)用枚举算法求解“找出所有满足各位数字之和等于7的三位数”时,
在下列所列举的数值范围内,算法执行效率最高的是()

A. 0-999 B. 100~999 C. 100-700 D. 106~700

例题1
陈丽忘记了支付宝的支付密码,她急需在30分钟内完成货款的支付,
请用Python编程帮她找回密码。她零星记得自己的支付密码信息:

(1)密码是6位数字,前面两位为85;
(2)最后两位数字相同;
(3)能被13和33整除。

例题2

有一盒兵兵球,9个9个地数,最后余下7个;5个5个地数,最后余下2个;
4个4个地数,最后余下1个。向这盒兵兵球至少有多少个?

15.5.3 易错点

(1)要尽可能地使可能解的罗列范围最小,以提高解决问题的效率。
(2)列举与检验过程不能遗漏。

15.5.4 模拟考题

考题 1 编程题

明明请你帮忙寻找100~999的所有“水仙花数”,并统计个数。
“水仙花数”是指各位数字的立方和等于该数本身的3位数,
例如153=1x1x1+5x5x5+3x3x3,要求输出结果如下所示:

153
360
361
407

请编程实现上述功能,或补全代码。

for i in range (①):
    x = i
    a = x % 10
    x = ②
    b = x % 10
    c = x // 10
    if (③):
        print (i)

考题 2 编程题

把1296分拆成a、b、c、d四个正整数,如果a加上2.b减去2,c乘以2,
d除以2,则4个结果相等。现在请你编写程序求出这4个数。
补全下面的代码。

for a in range (1, ①):
    b = ②
    for c in range (1,1296-a-b):
        d = ③
        if (b-2 = c*2) and (a+b+c+d == ④):
            print (a,b,c.d)


"""

# 求解模糊单据
# num = 10000
# count = 0
# res = []
# while num < 99999:
#     num += 1
#     if num % 37 == 0:
#         res.append(num)
#         count += 1
#
# print(res)
# print(count)

# 求解例题1
# for i in range(10000):
#     s = 850000 + i
#     if s % 13 == 0 and s % 33 == 0:
#         a = s % 10
#         b = s // 10 % 10
#         if a == b:
#             print(s)

# 求解例题2
# n = 16
# while True:
#     if n % 9 == 7 and n % 5 == 2 and n % 4 == 1:
#         print(n)
#         break
#     n += 1

# 考题1 评分标准:
# ① 100, 1000或等效答案(3分)
# ② x // 10或等效答案(3分)
# ③ a*a*a+b*b*b+c*c*c==i或等效答案(4分)

# 考题2 评分标准;
# ① 1296 (2分)
# ② a + 4(3分)
# ③ 4 (3分)
# ④ 1296 (2分)
