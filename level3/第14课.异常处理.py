# 异常处理

"""
14.1 学习要点
会使用try……except……进行异常处理

14.2 对标内容
理解程序的异常处理：try……except……结构语句

14.3 情境导入
我们在使用Python 语言写代码时，难免会弄出一些错误语句，而初学Python
的青少年朋友往往不知道是哪里出了错，或者不知道自己错在哪里。要找出是哪行
代码错误、错误的类型是什么、错在哪个细节，逐步分析，从而改正错误，那就要
引入'Python'的异常处理。

异常就是程序运行时过程中出现的错误或者遇到的意外情况。错误类型有语法
错误、运行错误、逻辑错误。出错的理由通常往往是输入错误、下标越界、类型错误，
操作不当等。

14.4 try……except……格式
Python 程序一般对输入有一定的要求，但是当实际输入不满足程序要求时，
可能会产生运行错误。为了保证程序运行的稳定性，此类运行错误可以被Python
程序捕获并合理控制。

14.4.1 知识点详解

语法规则：

>>> try:
        <语句块1>
>>> except:
        <语句块2>

当碰到错误语句，try 代码块的剩余代码将会被忽略，expect代码块的代码
将被执行，如下所示：

>>> try:
>>>     b = 8 / 0
>>>     print(b)
>>> except:
>>>     print("除数为0的错误！")

14.4.2 易错点
（1）当碰到错误语句，try代码块的剩余代码将会被忽略。
（2）except 容易拼写错误。

14.5 try……except……except……格式

14.5.1 知识点详解
语法规则：
>>> try:
        <语句块1>
>>> except:
        <语句块2>
>>> except:
        <语句块3>

当碰到错误语句，try代码块的剩余代码将会被忽略。根据错误的具体
情况，选择except代码块的代码执行，如下所示：

>>> try:
>>>     b = int(input('输入一个数'))
>>>     c = int(input('输入另一个数'))
>>>     m = b / c
>>>     print('商是', m)
>>> except ValueError:
>>>     print('输入的不是数字')
>>> except ZeroDivisionError:
>>>     print('除数为0！')
>>> except:
>>>     print('其它错误！')

当输入的b、c都是数字，且b非0时，输出正常的数值。
当输入a、b中有非数字时，运行结果为：'输入的不是数字'
当输入的c 为0时，运行结果为：'除数为0'
除了上述三种情况，都会输出：'其它错误'

14.5.2 易错点
（1）要求记住关键字"ValueError"
（2）要求记住关键字："ZeroDivisionError"

14.6 try……except……else……finally……格式

14.6.1 知识点详解
语法规则：

>>> try:
        <语句块1>
>>> except:
        <语句块2>
>>> else:
        <语句块3>
>>> finally:
        <语句块4>

当碰到错误语句时，try代码块的剩余代码将会被忽略，执行except语句块；
当try语句块正确时，try代码块执行完毕，执行else语句块；不管try代码块
正确与否，finally代码块均要执行，如下所示：

>>> try:
>>>     b = int(input('输入一个数'))
>>>     c = int(input('输入另一个数'))
>>>     m = b / c
>>>     print('商是', m)
>>> except:
>>>     print('错误！')
>>> else:
>>>     print('正确！')
>>> finally:
>>>     print('程序结束！')

当输入b、c两个数都是数字，且c非0时，运行结果输出正常的数值，
之后再执行else与finally两个代码块。
当b、c中输入错误时，运行时不执行try剩余的代码，执行except与finally两个代码块。
总之，不管try语句有无错误，finally代码块一定会被执行。

14.6.2 易错点
（1）这种异常处理格式容易与前面的两种异常处理格式混淆。
（2）finally代码块一定会被执行。
"""
