"""

第18课 自定义函数的创建与调用

18.1学习要点

(1)能够创建简单的自定义函数。
(2)掌握自定义函数的调用方法。
(3)理解函数的返回值。
(4)理解变量作用域、全面变量与局部变量。

18.2对标内容

(1)能够创建简单的自定义函数,掌握自定义函数的调用。
(2)理解函数的返回值、变量作用域等概念。

18.3 函数的返回值

3.1 知识点详解

1. 函数的返回值
函数不是直接显示输出的,它会处理一些数据并返回一个或一组值。
函数用return语句将值返回调用函数的代码行,返回值能将程序大部分繁重的工作移交到函数中去完成，从而简化主程序。

下面是一个简单的程序、用于接收姓氏和名字,然后返回完整的人名信息。

>>> def name(first_name, last_name):
>>>     full_name = first_name +" "+ last_name
>>>     return full_name
>>> print(name("zhang", "san"))

运行结果：zhang san

函数可以返回任何类型的值,包括字典、列表这样较复杂的数据结构。

还是上面的例子,这次返回一个表示人的字典。

>>> def name(first_name, last_name, ):
>>>     full_name = { "first" : first_name, "last": last_name }
>>>     return full_name
>>> print(name('wang', "lisi"))

运行结果：
{'first': 'wang', 'last': 'lisi'}

2.函数传递列表

传递列表在函数中很有用,列表中包含数字、名字甚至更复杂的对象,如下例所示。

>>> def f (names) :
>>>     for i in names:
>>>         print ("Hello"+" "+ i +"!!")
>>> f(["zhang", "lisi", "wang"])

运行结果：
Hello zhang!!
Hello lisi!!
Hello wang!!

思考

(1)对于带返回值的函数,输入并运行以下代码。

>>> def fact(n):
>>>     factorial = 1
>>>     for counter in range(1,n+1):
>>>         factorial *=counter
>>>     return factorial
>>> n = int(input('calculate n! Enter n=?'))
>>> print (n, '!=', fact(n))

(2)对于带默认值的函数,输入并运行以下代码。

>>> def rtl(a = 3):
>>>     for n in range(a):
>>>         for m in range(n+1):
>>>             print('*',end='')
>>>         print ()
>>> rtl()
>>> rtl(5)

18.3.2 易错点

(1)比对带返回值与不带返回值的白定义函数的差别,理解它们的含义。
(2)在函数中用return语句将值返回调用函数的代码行。

18.3.3 模拟考题

考题 1 单选题

关于以下程序,下列表述中错误的一项是

>>> def demo(n):
>>>    s=1
>>>    for i in range (1,n):
>>>        s *= i
>>>    return s

A. demo(n)函数的功能是求n的阶乘
B. s 是局部变量
C. n 是形参
D. range() 函数是 Python 内置函数

答案：A
解析: demo(n)函数的功能是求阶乘，range(1，n)是从 1 循环到 n-1。

考题 2 单选题

运行以下程序，输出结果正确的是

>>> def demo (x):
>>>    return x*2
>>> print(demo(demo(demo(1))))

A. 1
B. 2
C. 4
D. 8


答案：D
解析:函数被调用3次, 1乘以2,再乘以2,再乘以2,结果为8.

考题3判断题

函数体中必须包含 return 语句。

答案：错误
解析:自定义函数可以没有返回值。


18.4 全局变量和局部变量

18.4.1 知识点详解

一般定义在程序最开始处的变量称为全局变量,而在函数中定义的变量称为局部变量。
可以简单理解为,无缩进的为全局变量,有缩进的是局部变量。

全局变量的作用域是整个程序,而局部变量的作用域是函数内部。
当程序运行时,首先会找程序内部有没有局部变量,如果有,则调用;
如果没有,才去调用全局变量。

>>> name = 'zhang' #全局变量
>>> def f():
>>>    name = "li" #局部变量
>>>    print(name)
>>> f()

运行结果：
li

调用f()函数,程序会先在函数内部找有没有name这个变量,如果有,就会使用该name的值;
而如果没有定义局部变量name,函数再去找全局变量name。
可以通过global关键字,通过局部变量修改全局变量的值,如下例所示。

>>> name="zhang" #定义全局变量
>>>     def f():
>>>         global name #在函数内部,通过global关键字,通过局部变量修改全局变量的值
>>>         name="li"
>>>         print(name)
>>> f() #打印局部变量name的值
>>> print(name) #打印全局变量name的值

运行结果：lili

在运行结果中可以明显看出,使用global关键字后,在定义局部变量的同时也修改了全局变量的值。
global与nonlocal的区别: global关键字用来在定义局部变量的同时,修改全局变量的值;
nonlocal关键字用来在函数或局部作用域使用外层(非全局)变量。

>>> def add():
>>>     count = 1
>>>     def fun():
>>>         nonlocal count
>>>         print(count)
>>>         count += 2
>>>     return fun
>>> a = add()
>>> a()
>>> a()

运行结果：1

思考

(1)对于局部变量作用域,输入下列代码,并运行试试。

>>> def f1():
>>>     x=5
>>>     y=6
>>>     print(x+y)
>>> def f2(): # 改为（×）
>>>     y = 1
>>>     print(x+y) #出错！不能引用f1()中的x
>>> f1()
>>> f2(5)

调用f2(5)时出错了,处理办法有以下两种。

方法1: 将“def f2():” 改为 “def f2(x):”。
方法2: 将“x=5”从f1()中移出来,使x变为全局变量。

(2)如果在函数中定义的局部变量与全局变量同名,则调用函数时,局部变量屏蔽全局变量。

输入下列代码,并运行试试。

>>> x='outside'
>>> y='global'
>>> def f():
>>>     x='inside'
>>>     print(x)
>>>     print(y)
>>> f()
>>> print(x)


18.4.2 易错点

(1）理解global与 nonlocal关键字的区别和它们各自的用法。
(2)如果在函数中定义的局部变量与全局变量同名,则调用函数时,局部变量屏蔽全局变量。

18.4.3 模拟考题
考题1单选题

运行以下程序，输出的结果是

>>> x=1
>>> def demo():
>>>     global xx=2
>>>         print (x)demo ()
>>> print (x)

A.  1
    1
B.  2
    1
C.  1
    2
D.  2
    2

答案:D
解析: Python中定义函数时,若想在函数内部对函数外的变量进行操作,
就需要在函数内部声明其为global,以改变它的值。

考题2单选题

运行以下代码，正确的结果是

>>> def f(s):
>>>     t = 0
>>>     max = 0
>>>     for i in s:
>>>         if i >= "0" and i <= "9":
>>>             t = t + 1
>>>         else:
>>>             if t > max:
>>>                 max = t
>>>             t = 0
>>>     print (max)
>>> list = "123ab45cd6d"
>>> f(list)

A. 0
B. 1
C. 2
D. 3

答案：D
解析:本段代码中,函数f()的作用是求最长的连续数字字符串的长度。

考题3判断题

调用嵌套函数outer(),两次输出变量x的值是不一样的。

>>> def outer():
>>>     x = "local"
>>>     def inner():
>>>         x = 'nonlocal'
>>>         print ("inner:", x)
>>>     inner()
>>>     print ("outer:", x)


答案：正确
解析:在嵌套函数中,其内部与外部相同名称的变量是互不影响的,所以两次输出变量x的值是不一样的。


18.5 为函数的参数和返回值指定类型

18.5.1 知识点详解

Python是动态类型语言,新建变量时不需要声明与指定类型,自定义函数时也是如此。
但是, Python 3.5之后的版本就新增了对函数参数和返回值的类型指定和检查，新建变量时也可以指定类型。

例如下面这个函数,指定了输入参数a的类型为int,而b的类型为str,并且返回值的类型为 str
可以看到，调用此函数，最终返回了一个字符串。

>>> def f(a:int,b:str) -> str:
>>>     c = a * b
>>>     print (c)
>>>>    return f
>>> f(3, "zhongguo!")

运行结果：
zhongguo! zhongguo! zhongguo!

当我们调用这个函数时,如果参数a输入的是字符串,
实际上运行不会报错,毕竟Python的本质还是动态类型语言。

>>> def f(a:int,b:str)-> str:
>>>     print (a,b)
>>>     return 500
>>> f('nihao','zhongguo!')

运行结果：
nihao zhongguo!

18.5.2 易错点

(1) Python 3.5之后的版本新增了对函数参数和返回值的类型指定和检查,新建变量时也可以指定类型。
(2)如果参数a输入的类型不匹配,实际上运行时不会报错。

18.5.3 模拟考题

考题 1 编程题

设计一个算法，根据邮件的重量和用户是否选择加急计算邮费。

计算规则:重量在1000克以内(含1000克),基本邮费8元,超过10000克的部分,
每500克加收超重费4元,不足500克部分按500克计算。如果用户选择加急、多收5元。

根据上述计算规则,编写自定义函数完成程序功能,或补全代码。

描述:根据邮件的重量和用户是否选择加急计算邮费。
函数名: postage(w:int, f:str)->int
参数表: w代表邮件的重量(整数)。f是表示是否加急的字符串,其中"y和'n'分别表示加急和不加急。
返回值：返回邮费（整数）。

示例: 当w=1200, f=y'时,返回17。

>>> def postage(w:int, f:str) -> int:
>>>     cost = 0
>>>     if f== 'y':
>>>         cost =  '①'
>>>     else:
>>>         cost = '②'
>>>     if w > 1000:
>>>         cost += '③'
>>>         if w % 500 > 0:
>>>             cost += 4
>>>     return cost
>>> w = int(input ('邮件的重量: '))
>>> f = input('是否加急：')
>>> print(postage (w, f))

评分标准:

①5+8 或等效答案（4分）；
②8 或等效答案（4 分）；
③(w-1000) //500*4 或等效答案（4分)。
"""