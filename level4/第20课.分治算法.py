"""
第20课 分治算法

20.1 学习要点

（1）理解基本算法中的分治算法。
（2）能够用分治算法实现简单的Python程序。

20.2 对标内容

理解基本算法中的分治算法，能够用分治算法实现简单的Python程序。

20.3 分治算法

20.3.1 情景导入

假设你正在爬楼梯，需要n步才能到达顶部。但每次你只能爬一步或者两步，你能有多少种不同的方法爬到顶部？

>>> def climb(n=7):
>>>     if n<=2:
>>>         return n
>>>     return climb(n-1) + climb(n-2) #等价于斐波那契数列！
>>> print(climb(5)) #8
>>> print(climb(7)) #21


20.3.2 知识点详解

1.分治算法的概念

分：将一个复杂的问题分成两个或更多个相同或相似的子问题，再把子问题分成更小的子问题。

治：最后子问题可以简单地直接求解。

合:将所有子问题的解合并起来就是原问题的解。

2.分治算法的特征

(1)该问题的规模缩小到一定的程度就可以容易地解决。

(2)该问题可以分解为若干个规模较小的相同问题，即该问题具有最优子结构性质。

(3)该问题分解出的子问题的解可以合并为该问题的解。

(4)该问题所分解出的各个子问题是相互独立的，即子问题之间不包含公共的子子问题。

第一条特征是绝大多数问题可以满足的,因为问题的计算复杂性一般随着问题规模的增加而增加。

第二条特征是应用分治算法的前提,大多数问题也可以满足,此特征反映了递归思想的应用。

第三条特征是关键，能否利用分治算法完全取决于问题是否具有这一条特征，如果具备了第一条和第二条特征，而不具备第三条特征，则可以考虑用贪心法或动态规划法。

第四条特征涉及分治算法的效率，如果各个子问题不是相互独立的，则分治算法要做许多不必要的工作,重复地解公共的子问题,此时虽然可用分治算法,但一般用动态规划法会更好。


3.分治算法的例子

例题 1 对数组进行快速排序

快速排序（Quicksort）是对冒泡排序的一种改进。它的基本思想是通过一遍排序将要排序的数据分割成独立的两部分，
其中一部分的所有数据都比另一部分的所有数据都小，然后再按此方法对这两部分数据分别进行快速排序。

整个排序过程可以递归进行,最终使所有数据变成有序序列。

快速排序算法通过多次比较和交换来实现排序，其排序流程如下。

(1)首先设定一个分界值，通过该分界值将序列数据分成左、右两部分。
(2)将大于或等于分界值的数据集中到右边,小于分界值的数据集中到左边此时,
左边各元素的值都小于或等于分界值,而右边各元素的值都大于或等于分界值。
(3)然后,左边和右边的数据可以独立排序。对于左边的数据,又可以取一个分界值，将该部分数据再分成左、右两部分，
同样在左边放置较小值，右边放置较大值。右边的数据也可以做类似处理。
(4)重复上述过程，可以看出，这是一个递归定义。通过递归将左边排好序后,再通过递归将右边排好序。
当左、右两部分分别排序完成后,整个序列数据的排序也就完成了。

快速排序的排序步骤：设要排序的数据是 A[0]…A[N-1]，首先任意选取一个数据(通常选用数组的第一个数)作为关键数据,
然后将所有比它小的数都放到它左边，所有比它大的数都放到它右边，这个过程称为一遍快速排序。

值得注意的是，快速排序不是一种稳定的排序算法，也就是说，多个相同的值的相对位置也许会在算法结束时发生变动。

一遍快速排序的算法是如下。

(1)设置两个变量i、j，排序开始时，i=0, j=N-1。

(2）以第一个元素作为关键数据，将其值赋值给 key，即 key=A[0]。

(3）从j开始向前搜索，即由后向前搜索（j--），找到第一个小于 key 的值 A[j]，将 A[j] 和 A[i] 的值互换。

(4）从i开始向后搜索，即由前向后搜索（i++），找到第一个大于 key 的A[i]，将 A[i] 和 A[j] 的值互换。

(5）重复第（3）、（4）步，直到i=j；第（3）、（4）步中如果没有找到符合条件的值，即（3)中A[j]不小于key,
（4)中 A[i]不大于key，改变j、i的值，使得j=j-1， i=i+1，直至找到为止。找到符合条件的值，进行交换时，i、j指针位置不变。
另外，i==j这一过程一定正好是i++ 或j-- 完成时，此时循环结束。

假设一开始时序列a是: 5, 3, 7, 6, 4, 1, 0, 2, 9, 10, 8

此时,ref=5, i=0, j=10，从后往前找，第一个比 5 小的数是 a[7]=2，因此序列变为：

2, 3, 7, 6, 4, 1, 0, 5, 9, 10, 8

此时i = 0, j = 7,从前往后找,第一个比5大的数是a[2]=7,因此序列变为:

2, 3, 5, 6, 4, 1, 0, 7, 9, 10, 8

此时i = 2, j = 7、从第7位往前找,第一个比5小的数是a[6]=0,因此序列变为:

2, 3, 0, 6, 4, 1, 5, 7, 9, 10, 8

此时i=2,j=6,从第2位往后找,第一个比5大的数是a[3]=6,因此序列变为:

2, 3、0, 5, 4, 1, 6、 7,9, 10, 8。

此时i=3,j=6,从第6位往前找,第一个比5小的数是a[5]=1,因此序列变为:

2,3,0, 1、4, 5, 6、7、9, 10,8。

此时i=3,j=5，从第 3位往后找，直到第6位才有比5大的数(正常区间已无满足的数)
这时，i=j=6， ref成为一条分界线，它之前的数都比它小，之后的数都比它大,对于前、后两部分数,可以采用同样的方法来排序。

代码 1

>>> def quicksort(list,p,r):
>>>     if p < r:
>>>         q = partion(list,p, r)
>>>         quicksort(list,p,q)
>>>         quicksort (list, q+1, r)

>>> def partion(list,p,r):
>>>     i = p - 1
>>>     for j in range (p,r):
>>>         if list[j] <= list[r]:
>>>             i += 1
>>>             list[i],list[j]=list[j],list[i]
>>>     list[i+1],list[r] = list[r],list[i+1]
>>>     return i

>>> list1=[5,3,7,6,4,1,0,2,9,10,8]
>>> quicksort (list1, 0, len(list1) - 1)
>>> print(list1)


代码 2

#划分分区(非就地划分)

>>> def partition(nums=list):
>>>     pivot = nums[0] #挑选枢纽
>>>     lo = [x for x in nums[1:] if x < pivot] #所有小于pivot 的元素
>>>     hi = [x for x in nums[1:] if x >= pivot] #所有大于 pivot 的元素
>>>     return lo,pivot,hi

#快速排序

>>> def quick_sort(nums):
>>>     if len(nums) <= 1: #被分解的 Nums 小于 1 则解决了
>>>         return nums
>>>     lo,pivot,hi = partition(nums) #分解
>>>     return quick_sort (lo) + [pivot] + quick_sort (hi) # 递归（树），分治，合并
>>> lis = [7, 5, 0, 6, 3, 4, 1, 9, 8, 2]
>>> print (quick_sort (lis) ) #[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]


例题 2

给定一个顺序表，编写一个求出其最大值的分治算法。

#基本子算法（内置算法）
#虽然也可以处理大序列,这里用于解决分治问题规模小于或等于2时

>>> def get_max(nums=list):
>>>     return max (nums)

# 分治法
>>> def solve(nums):
>>>     n = len (nums)
>>>     if n <= 2: #分治问题规模小于或等于2时解决
>>>         return get_max (nums)
>>>     left_list, right_list = nums[:n//2], nums[n//2:] #分解（子问题规模为 n/2）
>>>     left_max, right_max = solve(left_list), solve(right_list) #递归（树），分治
>>>     return get_max([left_max, right_max]) #合并
>>> alist = [12,2,23,45,67,3,2,4,45,63,24,23]
>>> print (solve(alist)) # 求最大值 # 67


思考

（1）在Python 中随机产生一个1~1000的整数，使用分治算法中的二分查找法猜测这个数的值，最多需要猜几次？()

A. 7
B. 8
C. 9
D. 10

答案:D

解析:分治算法的设计思想是将一个难以直接解决的大问题,分割成一些规模较小的相同问题,以便各个击破,分而治之。
对于一个规模为n的问题,若该问题可以容易地解决(比如说规模n较小)。则直接解决,否则就将其分解为k个规模较小的子问题、
这些子问题互相独立且与原问题形式相同,递归地解这些子问题,然后将各子问题的解合并得到原问题的解。
其中,二分查找法的思想说来比较简单,就是利用上下限不停地缩小查找的界限,当缩小到一定范围内时,就可以解决了。
算法的时间复杂度一般为log₂n,因此查找10次所能够覆盖的数的范围已达到 1024。

理解体现分治算法的二分查找法的原理。

(2)二分查找法是利用(____)实现的。

答案：分治算法


20.3.3 易错点

(1)在理解递归算法的基础上理解分治算法。
(2) “分” “治”的概念必须理解。


20.3.4 模拟考题

考题 1单选题

以下函数是将一个整数划分为若干个正整数相加的例子,如4=4, 1+3=4
1+1+2=4, 2+2=4, 1+1+1+1=4共5种,则if条件里应补充的选项为（）

def function (b,a)： #b为待划分的整数，a 为正整数加数的个数上限
    if ():
        return 1
    elif a==b and b>1:
        return function(b,b-1) +1
    elif b<a:
        return function(b,b)
    elif b>a:
        return function (b,a-1)+function (b-a,a)


A. a==1 or b==1
B. a==0 or b==1
C. a==1 or b ==0
D. a==1 and b==1

答案: A

考题2单选题

一个袋子里有128枚硬币,其中一枚是假币,并且假币和真币外观一模一样,仅凭肉眼无法区分,仅知道假币比真币轻一些,
我们现在借助天平来查找假币,最多称几次可以找到假币？

A. 5
B. 6
C. 7
D. 8

答案：C

解析: 将n枚硬币分成两等份,然后放到天平的两端,则假币在较轻的那一端;
然后将较轻的那一端的硬币再分成两等份,再放到天平的两端进行比较,假币还是在较轻的那一端;
直到最后只剩下两枚硬币了,分别放到天平的两端,轻的那一枚就是假币。

当然,最后也可能剩下3枚硬币,我们可以从这3枚硬币中任意拿出来一枚，然后将剩下的两枚放到天平的两端,
如果天平是平的,则说明拿出来的那枚硬币就是假币;如果天平不是平的,则轻的那一端是假币。

所以, 128枚硬币可以这样分解: 128→64→32→16→8→4→2→1,即最多称 7 次可以找到假币。


考题3判断题

使用分治算法分解的子问题是相互独立的、无关联的,子问题的解可以合并为原问题的解。（）


答案：正确

解析:分治算法的基本思想是将一个规模为n的问题分解为k 个规模较小的子问题,这些子问题相互独立且与原问题性质相同。
求出子问题的解,就可得到原问题的解。
"""
