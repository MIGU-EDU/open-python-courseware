"""
第19课 递归与递推

19.1 学习要点

（1）通过自定义函数的调用，实现递归方法。
（2）掌握由递归变递推的方法。

19.2 对标内容

理解基本算法中递归的概念，实现基本算法中的递归方法，掌握基本算法中由递归变递推的方法。

19.3 递旧算法

19.3.1 情景导入

汉诺塔（Hanoi Tower），又称河内塔，源于印度的一个古老传说。
大梵天创造世界的时候做了3根金刚石柱子，在一根柱子上从下往上按照从大到小的顺序摞着64片黄金圆盘。
大梵天命人把圆盘从下往上按照从大到小的顺序重新摆放在另一根柱子上。
并且规定，任何时候，在小圆盘上都不能放大圆盘，且在3根柱子之间一次只能移动一个圆盘。

问应该如何操作？

>>> def hanoi(n, a, b, c):
>>>     if n == 1:
>>>         print(a, " -> ", c)
>>>     elif n == 2:
>>>         print(a, "->", b)
>>>         print(a, "->", c)
>>>         print(b, "->", c)
>>>     else:
>>>         hanoi(n - 1, a, c, b)
>>>         print(a, "->", c)
>>>         hanoi(n - 1, b, a, c)
>>>     return None
>>> n = 4
>>> print('移动次数：｛0｝'.format(2 ** n - 1))
>>> hanoi(n, 'A', 'B', 'C')


19.3.2 知识点详解

1．递归的概念

在定义一个函数或过程时，如果出现调用自身的成分，则称为递归。

例如，使用以下程序计算fx=1+2+3+4+5的值。

>>> def fx(a):
>>>     if a <= 1:
>>>         return 1
>>>     else:
>>>         return a + fx(a - 1) #调用自身
>>> print(fx(5))

递归是程序设计中的一种重要方法，它使许多复杂的问题变得简单，容易解决了。
就递归算法而言，并不涉及高深的数学知识，但要建立递归的概念、深入了解递归过程也不容易。

递归应用实例-一阶乘计算

数学中阶乘的定义如下。

5的阶乘：5 != 5x4x3x2x1
4的阶乘：4 != 4x3x2x1
整数n的阶乘：n != n x (n-1)x···x2x1

问题分析：

n != n x (n-1)!，（例如 5 != 5x4!），而1 != 1。
求n的阶乘转化为求n-1的阶乘，当n=3时，程序如下例所示。

>>> def fact(n):
>>>     if n <= 1:
>>>         return 1
>>>     else:
>>>         return  n * fact(n - 1)
>>> print(fact(3))

递归算法的基本思想是先把规模较大的问题变成规模较小的问题，再把规模较小的问题又变成规模更小的问题······
当问题小到一定程度时，可以直接得出它的解，从而得到原来问题的解，即采用“大事化小、小事化了”的基本思想。

2．递归算法的实现要点

（1）递归算法有明确的结束递归的边界条件（又称终止条件）以及结束时的边界值，可以通过条件语句（if语句）实现。
（2）函数在它的函数体内调用自身，且向着递归的边界条件发展。

>>> def fact(n):
>>>     if n <= 1:
>>>         return 1 #边界条件
>>>     else:
>>>         return n * fact(n - 1) #包含其本身

求阶乘使用循环（递推）实现，如下例所示。

>>> def fact(n):
>>>     s = 1
>>>     for i in range(1,n+1):
>>>         s = s * i
>>>     return s

就本例而言，同学们会认为递归算法可能是多余的，费力而不讨好。
但许多实际问题不可能或不容易找到显而易见的递推关系，这时递归算法就显现出了明显的优越性。

思考

（1）下列有关递归的说法，错误的是（）

A.递归算法的代码一般较少
B.递归算法一定要有终止条件
C.递归算法体现了“大事化小”的思想
D.递归函数中可以不包含条件控制语句

答案：D

（2）用递归算法求1～n个连续自然数的和的程序段代码如下：

def sum(n):
    if n=1:
        return 1
    else:
        return '' # 请将代码补充完整
print(sum(5))

答案：n+sum(n-1)

19.3.3 易错点
（1）递归算法的实现要点需要识记。
（2）用分支结构描述边界条件与递归体。


19.3.4 模拟考题

考题1单选题

以下函数要实现5的阶乘，则应补充的选项为（）

def function(a):
    if(_):
        return function(a+1)*a
    else:
        return 1
print(function(1))

A. a>6
B. a<6
C. a>5
D. a<5

答案：B
解析：这是要实现1x1x2x3x4x5的运算。

考题2 单选题

斐波那契数列：数列从第3项开始，每一项都等于前两项之和。
要计算数列第n项的值，可以使用递归函数实现，代码如下。

def fn(n):
    if n == 1:
        return 1
    elif n == 2:
        return 1
    else:
        return ____

下画线上的代码可填充下列哪个？（）


A.fn(n)+fn(n-1)
B.fn(n-1)+fn(n-2)
C.n+1
D.fn(n+1)+fn(n+2)

答案：B
解析：参照斐波那契数列的定义可知，要返回前两项之和。


考题3 判断题

执行以下代码：

ans = 0
def fu(a,b,,b,x=1)
    if b == 1:
        return 2
    global ans
    ans += fu(a-x,b-1,2)
    return ans
print(fu(5,4,3))

程序输出的结果为2


答案：正确
解析：根据递归调用原理可以计算出结果。


19.4 递推算法

19.4.1 情景导入

递推是序列计算中的一种常用方法。它是按照一定的规律来计算序列中的每一项，
通常是通过计算前面的一些项来得出序列中指定项的值，如非常有名的斐波那契数列。
你会发现大多数花朵的花瓣数目是斐波那契数列中的某一项：3,5,8，13,21,34,55,89······

例如百合花有3个花瓣；梅花有5个花瓣；飞燕草有8个花瓣；
向日葵不是有21个花瓣，就是有34个花瓣；雏菊有34、55或89个花瓣。
其他花瓣数目则很少出现。你不妨留心数数看。

19.4.2 知识点详解

递归与递推的对比：

有5个人坐在一起，问第5个人多少岁，他说比第4个人大1岁；问第4个人多少岁，
他说比第3个人大1岁；问第3个人多少岁，他说比第2个人大1岁；问第2个人多少岁，
他说比第1个人大1岁；问第1个人多少岁，他说他8岁。请问第5个人多少岁？

以下是Python程序。

>>> def age(n):
>>>     if n = 1:
>>>         return 8
>>>     else:
>>>         return age(n - 1) + 1
>>> print("第5个人" + str(age(5)) + "岁")

该程序采用的是递归算法。

儿童节那天，有6位同学参加了钓鱼比赛，他们每个人钓到的鱼的数量都各不相同。
问第1位同学钓了多少条鱼时，他指着第2位同学说比他多钓了2条；问第2位同学，他又说比第3位同学多钓了2条鱼·····
大家都说比下一位同学多钓了2条鱼。最后问到第6位同学时，他说自己钓了3条鱼。请问第1位同学钓了多少条鱼？

₀ ₁ ₂ ₃ ₄ ₅ ₆ ₇ ₈ ₉
设第一位同学钓了 k₁ 条鱼，欲求 k₁，需从第6位同学的钓鱼条数 K₆ 入手，根据“多钓了2条鱼”这个规律，按照一定的顺序逐步进行推算。

k₆ = 3
k₅ = k₆ + 2 = 3 + 2 = 5
k₄ = k₅ + 2 = 5 + 2 = 7
k₃ = k₄ + 2 = 7 + 2 = 9
k₂ = k₃ + 2 = 9 + 2 = 11
k₁ = k₂ + 2 = 11 + 2 = 13

递推公式：k = k + 2
初始条件：k = 3

通过5次计算就可求出问题答案。

本程序的递推算法可用下图来描述：


初始值    i=1           i=2            i=3         i=4         i=5           输出
k = 3   k = k + 2    k = k + 2    k = k + 2    k = k + 2   k = k + 2        k的值
        (5)            (7)           (9)         (11)       (13)


递推算法程序的实现如下所示。

>>> k = 3
>>> for i in range(1,6):
>>>     k += 2
>>> print(k)

运行结果：
13


例题

用递推算法求斐波那契数列的前n项。

斐波那契数列指的是这样一个数列：1、1、2、3、5、8、13、21、34 ……

其第1项、第2项为1，从第3项开始，每一项是前两项之和。

分析：设a、b为斐波那契数列的前2项，则有 a=1 b=1

则第3项c 为 c = a + b

那第4项呢？第4项为第2项和第3项之和

第i项呢？ 用通用公式表示为c = a + b

但此时的a从哪里来，b又从哪里来呢？ a是上一次的b，而b是上一次的c

Python程序如下

>>> a = 1
>>> b = 1
>>> n = eval(input("请输入n:")
>>> print (a,b,end=" ")
>>> for i in range(3,n+1):
>>>     c = a + b
>>>     a = b
>>>     b = c
>>>     print (c,end="")


19.4.3 易错点

（1）理解递归算法与递推算法的区别。
（2）能够用递归算法或递推算法解决实际问题。

19.4.4 模拟考题

考题1 单选题
设有一个共有n级台阶的楼梯，某人每步可走1级，也可以走2级，用递推的方式可以计算出某人从底层开始走完全部台阶的走法。
例如，当n=3时，共有3种走法，即1＋1＋1、1＋2、2+1。当n=6时，从底层开始走完全部台阶的走法共有多少种？

A.12
B.13
C.14
D.15

答案：B

解析：递推算法是一种常用算法，每次从上一次递推的结果开始，利用递推关系，求出下一次递推的结果，直到符合要求为止。
通过对题目进行分析可知，由f(1)=1以及f(2)=2这两个初值以及递推关系式f(n)=f(n-1)+f(n-2)可推出f(6)=13。


考题2单选题

若一个问题的求解既可以使用递归算法，也可以使用递推算法，则往往采用以下哪一种算法？（）

A.递归
B.递推
C.分治
D.排序

答案：B

解析：递推算法是一种常用算法，每次从上一次递推的结果开始，利用递推关系，求出下一次递推的结果，直到符合要求为止。
递归算法相对递推算法要复杂得多。递归算法是递推分解问题，然后再将最简单情况的解回归成大问题的解。
由于递归会引起一系列函数调用，有不少重复计算，其执行的效率也较低。

因此若某问题既能用递归算法求解，又能用递推算法求解，则使用递推方法求解更容易，效率也高得多。
"""
